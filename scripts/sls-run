#!/bin/sh

set -e

if [ -z "$PLUGIN_ROLE" ];
then
    echo "Error: please provide aws role to assume"
    exit 1
fi

if [ "$PLUGIN_DRONE_DEPLOY_TO_OVERRIDE" != "false" ];
then
    echo "Overriding stage '$PLUGIN_STAGE' with '$DRONE_DEPLOY_TO' from deployment event."
    export PLUGIN_STAGE=$DRONE_DEPLOY_TO
fi

if [ -z "$PLUGIN_STAGE" ];
then
    echo "Error: please provide deployment stage"
    exit 1
fi

if [ -z "$PLUGIN_REGION" ];
then
    echo "Error: please provide aws region "
    exit 1
fi
export AWS_DEFAULT_REGION=$PLUGIN_REGION

if [ -z "$PLUGIN_LAMBDA_NAME" ]
then
    echo "Info: Lambda name not defined. Service name from serverless.yml with stage suffix will be used."
    export LAMBDA_NAME=$(cat serverless.yml | yq .service | sed 's/"//g')-$PLUGIN_STAGE
else
    export LAMBDA_NAME=$PLUGIN_LAMBDA_NAME
fi

if [ -z "$PLUGIN_LAMBDA_VERSION" ]
then
    export LAMBDA_VERSION=$(echo $DRONE_COMMIT_SHA | cut -c -11)
else
    export LAMBDA_VERSION=$PLUGIN_LAMBDA_VERSION
fi

echo "Assuming: ${PLUGIN_ROLE}"
CREDS=`aws sts assume-role --role-arn ${PLUGIN_ROLE} --role-session-name=${DRONE_REPO_OWNER}-${DRONE_REPO_NAME}`

export AWS_ACCESS_KEY_ID=`echo $CREDS | jq -r '.Credentials.AccessKeyId'`
export AWS_SECRET_ACCESS_KEY=`echo $CREDS | jq -r '.Credentials.SecretAccessKey'`
export AWS_SESSION_TOKEN=`echo $CREDS | jq -r '.Credentials.SessionToken'`

USER=`aws sts get-caller-identity |  jq -r '.Arn'`
echo "Assumed: $USER"

if [ -n "$PLUGIN_CUSTOM_DIR" ]
then
    cd ${PLUGIN_CUSTOM_DIR}
fi

if [ -f "./node_modules/.bin/sls" ]
then
    COMMAND="./node_modules/.bin/sls"
else
    COMMAND="sls"
fi

echo "using sls version `${COMMAND} --version`"

if [ "$PLUGIN_CREATE_DOMAIN" = "true" ]
then
    set -x
    ${COMMAND} create_domain -s ${PLUGIN_STAGE} -r ${PLUGIN_REGION} -x
    set +x
fi

if [ "$PLUGIN_ACTION" = "deploy" ]
then
    ARGS=""
    if [ "$PLUGIN_CONCEAL" = "true" ]
    then
        ARGS="$ARGS --conceal"
    fi

    if [ "$PLUGIN_ACCELERATE" = "true" ]
    then
        ARGS="$ARGS --aws-s3-accelerate"
    fi

    set -x
    ${COMMAND} deploy ${ARGS} -s ${PLUGIN_STAGE} -r ${PLUGIN_REGION} -v
    ${COMMAND} info ${ARGS} -s ${PLUGIN_STAGE} -r ${PLUGIN_REGION} -v
    set +x

    if [ "$PLUGIN_S3_DEPLOY" = "true" ]
    then
        set -x
        ${COMMAND} s3deploy -s ${PLUGIN_STAGE} -r ${PLUGIN_REGION}
        set +x
    fi

    if [ "$PLUGIN_VERSION_ALIAS" = "true" ]
    then
        export VERSION=$(aws lambda list-versions-by-function --function-name $LAMBDA_NAME | jq ".Versions[-1].Version" | sed 's/\"//g')
        echo "Version is $VERSION"
        aws lambda create-alias --function-name $LAMBDA_NAME --function-version $VERSION --name $LAMBDA_VERSION
    fi
fi

if [ "$PLUGIN_ACTION" = "remove" ]
then
    set -x
    ${COMMAND} remove -s ${PLUGIN_STAGE} -r ${PLUGIN_REGION} -v
    set +x
fi

if [ -n "$PLUGIN_ALIAS" ]
then
    echo "Alias: $PLUGIN_ALIAS"
    export VERSION=$(aws lambda get-alias --function-name $LAMBDA_NAME --name $LAMBDA_VERSION | jq --raw-output '.FunctionVersion')
    echo "Version is $VERSION"

    set +e
    echo "Marking lambda version $VERSION as $PLUGIN_ALIAS"
    aws lambda update-alias --function-name $LAMBDA_NAME --function-version $VERSION --name $PLUGIN_ALIAS;
    UPDATE_STATUS=$?
    set -e

    # check if last command failed
    if [ $UPDATE_STATUS -gt 0 ]
    then
      echo "Creating alias $PLUGIN_ALIAS with lambda version: $VERSION"
      aws lambda create-alias --function-name $LAMBDA_NAME --function-version $VERSION --name $PLUGIN_ALIAS;
    fi

    echo Switching $LAMBDA_NAME:$PLUGIN_ALIAS to version $VERSION completed
fi